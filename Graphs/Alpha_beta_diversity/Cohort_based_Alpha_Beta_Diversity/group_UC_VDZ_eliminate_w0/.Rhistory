global_database
global_database = cbind(mean_database, "sd"= BY_n_obs_sd$`as.integer(num_snp)/train_size`)
global_database$N = as.factor(round(global_database$N),3)
global_database$group = as.factor(global_database$group)
glob_d = global_database# [-c(1,2,3,4),]
(g = plot_barplot_g( Dataset = glob_d, ylab = "Epistasis AUC", xlab = "Ratio SNPs/N"))
(g_nosd = plot_barplot_g_nosd( Dataset = glob_d, ylab = "Epistasis AUC", xlab = "Ratio SNPs/N"))
glob_d
BY_n_obs_sd
global_database = cbind(mean_database, "sd"= BY_n_obs_sd$GenNet.AUC.epistasis)
global_database$N = as.factor(round(global_database$N),3)
global_database$group = as.factor(global_database$group)
glob_d = global_database# [-c(1,2,3,4),]
glob_d$group = ((as.character(glob_d$group)))
(g = plot_barplot_g( Dataset = glob_d, ylab = "Epistasis AUC", xlab = "Ratio SNPs/N"))
glob_d$group = glob_d$N
(g = plot_barplot_g( Dataset = glob_d, ylab = "Epistasis AUC", xlab = "Ratio SNPs/N"))
global_database
library(lionessR)
library(igraph)
library(reshape2)
# BiocManager::install("limma")
library(limma)
library(SummarizedExperiment)
library(ROCR)
library(e1071)
library(randomForest)
library(dplyr)
library(readr)
library(AUC)
library(data.table)
# Parameters --------------------------------------------------------------
library("randomForest")
path_base = "C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/"
path_outcome = "C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/Alpha_Beta_diversity_results/"
path_base = "C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/Analysis/"
path_outcome = "C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/Alpha_Beta_diversity_results/"
setwd(path_base)
getwd()
files <- list.files(path=".", pattern="group*",
full.names=TRUE, recursive=FALSE)
curr_wd = getwd()
files
el
args = list()
args$direttoria = NA
files
outcomes = c("Clinical_outcome_combined", "Biomarker_outcome_combined","Endoscopic_outcome_combined" )
# na_treatment = c("zero", "elim")
# feat_sel = c("AverageShortestPathLength","ClusteringCoefficient",    "ClosenessCentrality",       "Eccentricity","Stress","Degree",
#       "BetweennessCentrality","NeighborhoodConnectivity","Radiality","TopologicalCoefficient")
data_frame_loop = expand.grid(files, outcomes)
colnames(data_frame_loop) = c("files", "outcomes")
data_frame_loop
riga_data = 1
setwd(curr_wd)
el = data_frame_loop[riga_data,]
input_file = el$files
outcome_file = el$outcome
# if (outcome_file == "Clinical_outcome_combined"){
#   next;
# }
args = list()
args$direttoria = gsub( "./","",input_file)
args$outcome = outcome_file
start = Sys.time()
library(vegan)
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(xlsx)
library(ggpubr)
library(data.table)
data_path   = "C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/Data/"
result_path = "C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/Alpha_Beta_diversity_results"
# FUNCTIONS ---------------------------------------------------------------
checkStrict <- function(f, silent=FALSE) {
vars <- codetools::findGlobals(f)
found <- !vapply(vars, exists, logical(1), envir=as.environment(2))
if (!silent && any(found)) {
warning("global variables used: ", paste(names(found)[found], collapse=', '))
return(invisible(FALSE))
}
!any(found)
}
calculate_violin_plot_test_del = function(dataset, matching_data, ext_pheno = "Delivery", name_g,dataset2 = NULL, low_l = 0.3, high_l = 3){
if (is.null(dataset2)){ ## ONLY 1 dataset --> 1 Responder
vSHAN = vegan::diversity(dataset, index = "shannon", MARGIN = 1, base = exp(1))
if (ext_pheno == "Delivery"){ ## DIFFERENT per phenotype
is_variable = ifelse(names(vSHAN) %in% matching_data$Child[matching_data$delivery_type.x == "Vaginal"],"Vaginal", "C-section")
} else if (ext_pheno == "Diet"){
is_same = matching_data$Child[matching_data$Diet_TP.x == matching_data$Diet_TP.y] %>% na.omit()
is_variable = ifelse(names(vSHAN) %in% is_same,"Persist.", "Non persist.")
}
} else { ## two datasts
vSHAN1 = vegan::diversity(dataset, index = "shannon", MARGIN = 1, base = exp(1))
vSHAN2 = vegan::diversity(dataset2, index = "shannon", MARGIN = 1, base = exp(1))
if (ext_pheno == "Delivery"){
is_variable1 = ifelse(names(vSHAN1) %in% matching_data$Child[matching_data$delivery_type.x == "Vaginal"],"Vaginal", "C-section")
is_variable2 = ifelse(names(vSHAN2) %in% matching_data$Child[matching_data$delivery_type.x == "Vaginal"],"Vaginal", "C-section")
} else if (ext_pheno == "Diet"){
is_same = matching_data$Child[matching_data$Diet_TP.x == matching_data$Diet_TP.y] %>% na.omit()
is_variable1 = ifelse(names(vSHAN1) %in% is_same,"Persist.", "Non persist.")
is_variable2 = ifelse(names(vSHAN2) %in% is_same,"Persist.", "Non persist.")
}
vSHAN = c(vSHAN1, vSHAN2) ; is_variable = c(is_variable1, is_variable2)
}
# vSHAN = vegan::diversity(dataset, index = "shannon", MARGIN = 1, base = exp(1))
# is_variable = ifelse(names(vSHAN) %in% matching_data$Child[matching_data$delivery_type.x == "Vaginal"],"Vaginal", "C-section")
vplotdf = data.frame("Alpha_div" = vSHAN, "Type_of_Delivery" = is_variable)
graph_name = ifelse(ext_pheno == "Delivery", "Mode of Delivery", "Diet")
g1 = ggplot(data.frame(Trait=vplotdf$Alpha_div, Cluster=as.factor(vplotdf$Type_of_Delivery)), aes(x=Cluster, y=Trait, fill = Cluster)) +
geom_violin() + ggtitle(paste0("Violin plot ",name_g, " Shannon diversity")) +
stat_summary(fun.data=mean_sdl, fun.args = list(mult = 1), geom="pointrange", size=2, color="gray") +
# DOT IS THE MEAN ; the extremities are + and - SD
# geom_boxplot(width = 0.2)+
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal(base_size = 17, base_line_size = 1.1)+
labs(y= expression(alpha*" diversity Shannon"), x = graph_name, fill = "")+ #, x = "x axis name")
coord_cartesian(ylim = c(low_l, high_l)) +
# theme_dark()+
# theme_classic(base_size = 17, base_line_size = 1.1)+
theme(axis.text=element_text(face="bold"),
axis.title=element_text(face="bold"), title = element_text(face = "bold",),text = element_text(size = 35),legend.position="none")
if (ext_pheno == "Delivery"){
(w4 = wilcox.test(vSHAN[is_variable == "Vaginal"], vSHAN[is_variable != "Vaginal"], paired = F))
} else if (ext_pheno == "Diet"){
(w4 = wilcox.test(vSHAN[is_variable == "Persist."], vSHAN[is_variable != "Persist."], paired = F))
}
return(list(graph = g1, test = w4, summ =vplotdf))
}
checkStrict(calculate_violin_plot_test_del)
# ALPHa and BETA diversity  -----------------------------------------------
# setwd("C:/Users/fmelo/Desktop/Backup_Federico/Maastricht_data/LucKi_cohort_data/MAGMA_APPROACH/OTUS_node_analysis_difference")
setwd(data_path)
direttoria = args$direttoria
outcome_file = args$outcome
setwd(path_base)
### DATA
otu_table = read.table(paste0("./", direttoria, "/Data/otu_table_selected_",direttoria, ".tsv" ))
direttoria
metadata <- read.delim("C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/Data/w0_n335_metadata.txt")
mapping_nameIndividual_SPARCC <- read.csv("C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/Data/Follow_up_data/mapping_nameIndividual_SPARCC.txt", sep="")
mapping_nameIndividual_SPARCC$NAME = gsub("_",".", mapping_nameIndividual_SPARCC$NAME)
mapping_nameIndividual_SPARCC_filt = mapping_nameIndividual_SPARCC[mapping_nameIndividual_SPARCC$NAME %in% c( rownames(matr_prediction)),]
mapping_nameIndividual_SPARCC_filt = mapping_nameIndividual_SPARCC[mapping_nameIndividual_SPARCC$NAME %in% c( rownames(otu_table)),]
mapping_nameIndividual_SPARCC$NAME = gsub("_",".", mapping_nameIndividual_SPARCC$NAME)
mapping_nameIndividual_SPARCC_filt = mapping_nameIndividual_SPARCC[mapping_nameIndividual_SPARCC$NAME %in% c( rownames(otu_table)),]
mapping_nameIndividual_SPARCC <- read.csv("C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/Data/Follow_up_data/mapping_nameIndividual_SPARCC.txt", sep="")
# mapping_nameIndividual_SPARCC$NAME = gsub("_",".", mapping_nameIndividual_SPARCC$NAME)
mapping_nameIndividual_SPARCC_filt = mapping_nameIndividual_SPARCC[mapping_nameIndividual_SPARCC$NAME %in% c( rownames(otu_table)),]
mapping_nameIndividual_SPARCC$NAME
rownames(otu_table)
direttoria
path_base
View(otu_table)
merged_outcome =  metadata[metadata$FC.nummer %in% rownames(otu_table), ]
merged_outcome
metadata <- read.delim("C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/Data/w0_n335_metadata.txt")
merged_outcome =  metadata[metadata$FC.nummer %in% rownames(otu_table), ]
merged_outcome
if (grepl("14", direttoria)){
# print("ciao")
metadata = read.delim("C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/Data/w14w24_Data/w14_n188_metadata.txt")
# metadata$FC.nummer = gsub("-",".",metadata$FC.nummer)
merged_outcome =  metadata[metadata$FC.nummer %in% rownames(otu_table), ]
} else if (grepl("24", direttoria)){
metadata = read.delim("C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/Data/w14w24_Data/w24_n160_metadata.txt")
# metadata$FC.nummer = gsub("-",".",metadata$FC.nummer)
merged_outcome =  metadata[metadata$FC.nummer %in% rownames(otu_table), ]
} else { ## WE NEED TO BE SURE FOR the 20
metadata <- read.delim("C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/Data/w0_n335_metadata.txt")
# merged_outcome =  metadata[metadata$FC.nummer %in% rownames(otu_table), ]
#
# mapping_nameIndividual_SPARCC <- read.csv("C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/Data/Follow_up_data/mapping_nameIndividual_SPARCC.txt", sep="")
# # mapping_nameIndividual_SPARCC$NAME = gsub("_",".", mapping_nameIndividual_SPARCC$NAME)
# mapping_nameIndividual_SPARCC_filt = mapping_nameIndividual_SPARCC[mapping_nameIndividual_SPARCC$NAME %in% c( rownames(otu_table)),]
# merged_outcome =  merge(mapping_nameIndividual_SPARCC_filt,metadata, by.y = "FC.nummer", by.x = "Individual_ID"    )
# pos = match( rownames(matr_prediction), merged_outcome$NAME)
#
# # NoLOOP_magma_net2 = NoLOOP_magma_net
# rownames(matr_prediction) = gsub("-",".",merged_outcome$Individual_ID[pos])
# # head(mapping_nameIndividual_SPARCC_filt)
# # head(colnames(NoLOOP_magma_net))
# merged_outcome$FC.nummer = merged_outcome$Individual_ID
# metadata$FC.nummer = gsub("-",".",metadata$FC.nummer)
# merged_outcome =  metadata[metadata$FC.nummer %in% rownames(matr_prediction), ]
#abort("using a wrong directory, not 14 or 24")
}
### DATA
otu_table = read.table(paste0("./", direttoria, "/Data/otu_table_selected_",direttoria, ".tsv" ))
if (grepl("14", direttoria)){
# print("ciao")
metadata = read.delim("C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/Data/w14w24_Data/w14_n188_metadata.txt")
# metadata$FC.nummer = gsub("-",".",metadata$FC.nummer)
merged_outcome =  metadata[metadata$FC.nummer %in% rownames(otu_table), ]
} else if (grepl("24", direttoria)){
metadata = read.delim("C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/Data/w14w24_Data/w24_n160_metadata.txt")
# metadata$FC.nummer = gsub("-",".",metadata$FC.nummer)
merged_outcome =  metadata[metadata$FC.nummer %in% rownames(otu_table), ]
} else { ## WE NEED TO BE SURE FOR the 20
metadata <- read.delim("C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/Data/w0_n335_metadata.txt")
merged_outcome =  metadata[metadata$FC.nummer %in% rownames(otu_table), ]
#
# mapping_nameIndividual_SPARCC <- read.csv("C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/Data/Follow_up_data/mapping_nameIndividual_SPARCC.txt", sep="")
# # mapping_nameIndividual_SPARCC$NAME = gsub("_",".", mapping_nameIndividual_SPARCC$NAME)
# mapping_nameIndividual_SPARCC_filt = mapping_nameIndividual_SPARCC[mapping_nameIndividual_SPARCC$NAME %in% c( rownames(otu_table)),]
# merged_outcome =  merge(mapping_nameIndividual_SPARCC_filt,metadata, by.y = "FC.nummer", by.x = "Individual_ID"    )
# pos = match( rownames(matr_prediction), merged_outcome$NAME)
#
# # NoLOOP_magma_net2 = NoLOOP_magma_net
# rownames(matr_prediction) = gsub("-",".",merged_outcome$Individual_ID[pos])
# # head(mapping_nameIndividual_SPARCC_filt)
# # head(colnames(NoLOOP_magma_net))
# merged_outcome$FC.nummer = merged_outcome$Individual_ID
# metadata$FC.nummer = gsub("-",".",metadata$FC.nummer)
# merged_outcome =  metadata[metadata$FC.nummer %in% rownames(matr_prediction), ]
#abort("using a wrong directory, not 14 or 24")
}
merged_outcome
if (sum(rownames(otu_table) %in% merged_outcome$FC.nummer) != nrow(otu_table)){
abort("MISMATCH --> the metadata does not have all the individual ")
}
is_missing_ = is.na(merged_outcome %>% dplyr::select(outcome_file))
otu_table_no_miss = otu_table %>% filter(!is_missing_)
merged_outcome_no_miss = merged_outcome %>% filter(!is_missing_)
outcome = rownames(otu_table_no_miss) %in% merged_outcome_no_miss$FC.nummer[merged_outcome_no_miss %>% dplyr::select(c(outcome_file)) == 1]
outcome
is_missing_ = is.na(merged_outcome %>% dplyr::select(outcome_file))
otu_table_no_miss = otu_table %>% filter(!is_missing_)
merged_outcome_no_miss = merged_outcome %>% filter(!is_missing_)
outcome = rownames(otu_table_no_miss) %in% merged_outcome_no_miss$FC.nummer[merged_outcome_no_miss %>% dplyr::select(c(outcome_file)) == 1]
## no_remission == 0
OTU_TABLE_MAGMA_no_remission <- otu_table_no_miss[!outcome,] #read.delim("MAGMA_data/6M/OTU_TABLE_MAGMA6M_69_noteliminate.tsv")
# 69 x 95
OTU_TABLE_MAGMA_remission <- otu_table_no_miss[outcome,]# read.delim("MAGMA_data/9M/OTU_TABLE_MAGMA9M_69.tsv")
vSHAN_DIV6M = vegan::diversity(OTU_TABLE_MAGMA_no_remission, index = "shannon", MARGIN = 1, base = exp(1))
vSHAN_DIV6M = vegan::diversity(OTU_TABLE_MAGMA_no_remission, index = "shannon", MARGIN = 1, base = exp(1))
vSHAN_DIV9M = vegan::diversity(OTU_TABLE_MAGMA_remission, index = "shannon", MARGIN = 1, base = exp(1))
vSHAN_DIV6M
vplotdf = data.frame("Alpha_div" = c(vSHAN_DIV6M, vSHAN_DIV9M), "Responder" = c(rep("No remission", nrow(OTU_TABLE_MAGMA_no_remission)),rep("Remission", nrow(OTU_TABLE_MAGMA_remission))))
# Basic violin plot
p <- ggplot(vplotdf, aes(x=Responder, y=Alpha_div)) +
geom_violin()
p
ggplot(data.frame(Trait=vplotdf$Alpha_div, Cluster=as.factor(vplotdf$Responder)), aes(x=Cluster, y=Trait, fill = Cluster)) +
geom_violin() + ggtitle("Violin plot Shannon diversity") +
stat_summary(fun.data=mean_sdl, fun.args = list(mult = 1), geom="pointrange",shape=3, size=3, color="gray") +
# geom_boxplot(width = 0.2)+
theme(plot.title = element_text(hjust = 0.5)) +
theme_gray(base_size = 17, base_line_size = 1.1)+
labs(y= expression(alpha*" diversity Shannon"), x = expression("Responder"), fill = "")+ #, x = "x axis name")
# theme_dark()+
# theme_classic(base_size = 17, base_line_size = 1.1)+
theme(axis.text=element_text(face="bold"),
axis.title=element_text(face="bold"), title = element_text(face = "bold",),text = element_text(size = 35),legend.position="none")
# mult = 1 ----------------------------------------------------------------
dir.create(paste0(result_path,"/", direttoria) )
result_path
direttoria
otu_table = read.table(paste0("./", direttoria, "/Data/otu_table_selected_",direttoria, ".tsv" ))
# C:\Users\fmelo\Desktop\Microbiome_drug_repurpose_project\group_CD_TNF_eliminate_14\Data\otu_table_dplyr::selected_group_CD_TNF_eliminate_14.tsv
if (grepl("14", direttoria)){
# print("ciao")
metadata = read.delim("C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/Data/w14w24_Data/w14_n188_metadata.txt")
# metadata$FC.nummer = gsub("-",".",metadata$FC.nummer)
merged_outcome =  metadata[metadata$FC.nummer %in% rownames(otu_table), ]
} else if (grepl("24", direttoria)){
metadata = read.delim("C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/Data/w14w24_Data/w24_n160_metadata.txt")
# metadata$FC.nummer = gsub("-",".",metadata$FC.nummer)
merged_outcome =  metadata[metadata$FC.nummer %in% rownames(otu_table), ]
} else { ## WE NEED TO BE SURE FOR the 20
metadata <- read.delim("C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/Data/w0_n335_metadata.txt")
merged_outcome =  metadata[metadata$FC.nummer %in% rownames(otu_table), ]
#
# mapping_nameIndividual_SPARCC <- read.csv("C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/Data/Follow_up_data/mapping_nameIndividual_SPARCC.txt", sep="")
# # mapping_nameIndividual_SPARCC$NAME = gsub("_",".", mapping_nameIndividual_SPARCC$NAME)
# mapping_nameIndividual_SPARCC_filt = mapping_nameIndividual_SPARCC[mapping_nameIndividual_SPARCC$NAME %in% c( rownames(otu_table)),]
# merged_outcome =  merge(mapping_nameIndividual_SPARCC_filt,metadata, by.y = "FC.nummer", by.x = "Individual_ID"    )
# pos = match( rownames(matr_prediction), merged_outcome$NAME)
#
# # NoLOOP_magma_net2 = NoLOOP_magma_net
# rownames(matr_prediction) = gsub("-",".",merged_outcome$Individual_ID[pos])
# # head(mapping_nameIndividual_SPARCC_filt)
# # head(colnames(NoLOOP_magma_net))
# merged_outcome$FC.nummer = merged_outcome$Individual_ID
# metadata$FC.nummer = gsub("-",".",metadata$FC.nummer)
# merged_outcome =  metadata[metadata$FC.nummer %in% rownames(matr_prediction), ]
#abort("using a wrong directory, not 14 or 24")
direttoria = paste0(direttoria,"_w0" )
}
direttoria
if (sum(rownames(otu_table) %in% merged_outcome$FC.nummer) != nrow(otu_table)){
abort("MISMATCH --> the metadata does not have all the individual ")
}
is_missing_ = is.na(merged_outcome %>% dplyr::select(outcome_file))
otu_table_no_miss = otu_table %>% filter(!is_missing_)
merged_outcome_no_miss = merged_outcome %>% filter(!is_missing_)
outcome = rownames(otu_table_no_miss) %in% merged_outcome_no_miss$FC.nummer[merged_outcome_no_miss %>% dplyr::select(c(outcome_file)) == 1]
## no_remission == 0
OTU_TABLE_MAGMA_no_remission <- otu_table_no_miss[!outcome,] #read.delim("MAGMA_data/6M/OTU_TABLE_MAGMA6M_69_noteliminate.tsv")
# 69 x 95
OTU_TABLE_MAGMA_remission <- otu_table_no_miss[outcome,]# read.delim("MAGMA_data/9M/OTU_TABLE_MAGMA9M_69.tsv")
vSHAN_DIV6M = vegan::diversity(OTU_TABLE_MAGMA_no_remission, index = "shannon", MARGIN = 1, base = exp(1))
vSHAN_DIV9M = vegan::diversity(OTU_TABLE_MAGMA_remission, index = "shannon", MARGIN = 1, base = exp(1))
vSHAN_DIV6M
vplotdf = data.frame("Alpha_div" = c(vSHAN_DIV6M, vSHAN_DIV9M), "Responder" = c(rep("No remission", nrow(OTU_TABLE_MAGMA_no_remission)),rep("Remission", nrow(OTU_TABLE_MAGMA_remission))))
# Basic violin plot
p <- ggplot(vplotdf, aes(x=Responder, y=Alpha_div)) +
geom_violin()
p
ggplot(data.frame(Trait=vplotdf$Alpha_div, Cluster=as.factor(vplotdf$Responder)), aes(x=Cluster, y=Trait, fill = Cluster)) +
geom_violin() + ggtitle("Violin plot Shannon diversity") +
stat_summary(fun.data=mean_sdl, fun.args = list(mult = 1), geom="pointrange",shape=3, size=3, color="gray") +
# geom_boxplot(width = 0.2)+
theme(plot.title = element_text(hjust = 0.5)) +
theme_gray(base_size = 17, base_line_size = 1.1)+
labs(y= expression(alpha*" diversity Shannon"), x = expression("Responder"), fill = "")+ #, x = "x axis name")
# theme_dark()+
# theme_classic(base_size = 17, base_line_size = 1.1)+
theme(axis.text=element_text(face="bold"),
axis.title=element_text(face="bold"), title = element_text(face = "bold",),text = element_text(size = 35),legend.position="none")
# mult = 1 ----------------------------------------------------------------
dir.create(paste0(result_path,"/", direttoria) )
setwd(paste0(result_path,"/",direttoria ))
f_ex = file.exists("Statistic_alpha.xlsx")
getwd()
f_ex
vplotdf%>%
group_by(Responder)%>%
summarise(Mean=mean(Alpha_div), Max=max(Alpha_div), Min=min(Alpha_div), Median=median(Alpha_div), Std=sd(Alpha_div), IQR = IQR(Alpha_div)) %>%
write.xlsx(.,file = paste0("Statistic_alpha", ".xlsx"),
sheetName = as.character(outcome_file), append = f_ex)
outcome_name = gsub("_outcome_combined", "", outcome_file)
low_l = 0.3 ; high_l = 5
v_age = ggplot(data.frame(Trait=vplotdf$Alpha_div, Cluster=as.factor(vplotdf$Responder)), aes(x=Cluster, y=Trait, fill = Cluster)) +
geom_violin() + ggtitle(paste0("Shannon diversity ", outcome_name)) +
stat_summary(fun.data=mean_sdl, fun.args = list(mult = 1), geom="pointrange", size=2, color="gray") +
# DOT IS THE MEAN ; the extremities are + and - SD
# geom_boxplot(width = 0.2)+
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal(base_size = 17, base_line_size = 1.1)+
coord_cartesian(ylim = c(low_l, high_l)) +
labs(y= expression(alpha*" diversity Shannon"), x = "Responder", fill = "")+ #, x = "x axis name")
# theme_dark()+
# theme_classic(base_size = 17, base_line_size = 1.1)+
theme(axis.text=element_text(face="bold"),
axis.title=element_text(face="bold"), title = element_text(face = "bold",),text = element_text(size = 35),legend.position="none")
print(v_age)
png(paste0("Violin_Shannon_alphadiv_",outcome_name,".png"), width = 300, height = 300, units='mm', res = 300)
print(v_age)
dev.off()
png(paste0("Violin_Shannon_alphadiv_ds_",outcome_name,".png"), width = 465, height = 225, units='mm', res = 300)
print(v_age)
dev.off()
ggplot(data.frame(Trait=vplotdf$Alpha_div, Cluster=as.factor(vplotdf$Responder)), aes(x=Cluster, y=Trait, fill = Cluster)) +
geom_violin() + ggtitle(paste0("Shannon diversity ", outcome_name)) +
stat_summary(fun.data=mean_sdl, fun.args = list(mult = 2), geom="pointrange", size=2, color="gray") +
# DOT IS THE MEAN ; the extremities are + and - SD
# geom_boxplot(width = 0.2)+
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal(base_size = 17, base_line_size = 1.1)+
labs(y= expression(alpha*" diversity Shannon"), x = expression("Responder"), fill = "")+ #, x = "x axis name")
# theme_dark()+
# theme_classic(base_size = 17, base_line_size = 1.1)+
theme(axis.text=element_text(face="bold"),
axis.title=element_text(face="bold"), title = element_text(face = "bold",),text = element_text(size = 35),legend.position="none")
png(paste0("Violin_Shannon_alphadiv_2sd_",outcome_name,".png"), width = 300, height = 300, units='mm', res = 300)
ggplot(data.frame(Trait=vplotdf$Alpha_div, Cluster=as.factor(vplotdf$Responder)), aes(x=Cluster, y=Trait, fill = Cluster)) +
geom_violin() + ggtitle(paste0("Shannon diversity ", outcome_name)) +
stat_summary(fun.data=mean_sdl, fun.args = list(mult = 2), geom="pointrange", size=2, color="gray") +
# DOT IS THE MEAN ; the extremities are + and - SD
# geom_boxplot(width = 0.2)+
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal(base_size = 17, base_line_size = 1.1)+
labs(y= expression(alpha*" diversity Shannon"), x = expression("Responder"), fill = "")+ #, x = "x axis name")
# theme_dark()+
# theme_classic(base_size = 17, base_line_size = 1.1)+
theme(axis.text=element_text(face="bold"),
axis.title=element_text(face="bold"), title = element_text(face = "bold",),text = element_text(size = 35),legend.position="none")
dev.off()
png(paste0("Violin_Shannon_alphadiv_ds_2sd_",outcome_name,".png"), width = 465, height = 225, units='mm', res = 300)
ggplot(data.frame(Trait=vplotdf$Alpha_div, Cluster=as.factor(vplotdf$Responder)), aes(x=Cluster, y=Trait, fill = Cluster)) +
geom_violin() + ggtitle(paste0("Shannon diversity ", outcome_name)) +
stat_summary(fun.data=mean_sdl, fun.args = list(mult = 2), geom="pointrange", size=2, color="gray") +
# DOT IS THE MEAN ; the extremities are + and - SD
# geom_boxplot(width = 0.2)+
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal(base_size = 17, base_line_size = 1.1)+
coord_cartesian(ylim = c(low_l, high_l)) +
labs(y= expression(alpha*" diversity Shannon"), x = expression("Responder"), fill = "")+ #, x = "x axis name")
# theme_dark()+
# theme_classic(base_size = 17, base_line_size = 1.1)+
theme(axis.text=element_text(face="bold"),
axis.title=element_text(face="bold"), title = element_text(face = "bold",),text = element_text(size = 35),legend.position="none")
dev.off()
# w1 = wilcox.test(Alpha_div ~ Responder, data=vplotdf)
# w1_bis = wilcox.test(vSHAN_DIV6M,vSHAN_DIV9M)
(w3 = wilcox.test(vSHAN_DIV6M,vSHAN_DIV9M, paired = F)  )
vSHAN_DIV6M
vSHAN_DIV9M
saveRDS(w3, paste0("TEST_WILCOXON_age_", outcome_file,".rds"))
library(compositions)
library(mixOmics)
OTU_TABLE_MAGMA6M_CLR = data.frame( clr( OTU_TABLE_MAGMA_no_remission ))
OTU_TABLE_MAGMA9M_CLR = data.frame( clr( OTU_TABLE_MAGMA_remission ))
# OTU_TABLE_MAGMA6M_CLR = read.table(file = "OTU_TABLE_69_SUB_CLR_6M.tsv")
# OTU_TABLE_MAGMA9M_CLR = read.table(file = "OTU_TABLE_69_SUB_CLR_9M.tsv")
## compositional trasformation, if I sum over an individual, the sum = 0
round(apply(OTU_TABLE_MAGMA9M_CLR,1,sum),2) ; round(apply(OTU_TABLE_MAGMA6M_CLR,1,sum),2)
PCA_6M_CLR = mixOmics::pca(OTU_TABLE_MAGMA6M_CLR)
PCA_6M_CLR
plotIndiv(PCA_6M_CLR, ind.names = F)
plotIndiv(PCA_6M_CLR)
plotVar(PCA_6M_CLR)
plot(PCA_6M_CLR)
PCA_9M_CLR = mixOmics::pca(OTU_TABLE_MAGMA9M_CLR)
PCA_9M_CLR
plotIndiv(PCA_9M_CLR, ind.names = F)
plotIndiv(PCA_9M_CLR)
plotVar(PCA_9M_CLR)
plot(PCA_9M_CLR)
round(apply(OTU_TABLE_MAGMA9M_CLR,1,sum),2) ; round(apply(OTU_TABLE_MAGMA6M_CLR,1,sum),2)
OTU_TABLE_MAGMA9M_CLR
OTUS = rbind(OTU_TABLE_MAGMA6M_CLR,OTU_TABLE_MAGMA9M_CLR)
PCA_CLR = mixOmics::pca(OTUS)
p_age = plotIndiv(PCA_CLR, ind.names = FALSE,
group = c(rep("No remission", nrow(OTU_TABLE_MAGMA6M_CLR)),rep("Remission", nrow(OTU_TABLE_MAGMA9M_CLR))),
col.per.group = brewer.pal(n = 4, name = "Set2")[c(2,3)],
pch = 16,#rep(as.numeric(as.factor(Children_6M$delivery_type.x))+15,2),
legend = TRUE, title = paste0("Responder ", outcome_name),# 'Beta diversity: PCA comp 1 - 2',
legend.title = '', legend.title.pch = 'Diet', legend.position = "top",cex = 3
, size.title = 30, point.lwd = 2, size.legend = 25, size.legend.title = 30, size.xlabel = 25, size.ylabel = 25, size.axis = 18)
png(paste0("Beta_diversity_per_Responder_",outcome_file,".png"), width = 300, height = 300, units='mm', res = 300)
p_age = plotIndiv(PCA_CLR, ind.names = FALSE,
group = c(rep("No remission", nrow(OTU_TABLE_MAGMA6M_CLR)),rep("Remission", nrow(OTU_TABLE_MAGMA9M_CLR))),
col.per.group = brewer.pal(n = 4, name = "Set2")[c(2,3)],
pch = 16,#rep(as.numeric(as.factor(Children_6M$delivery_type.x))+15,2),
legend = TRUE, title = paste0("Responder ", outcome_name),# 'Beta diversity: PCA comp 1 - 2',
legend.title = '', legend.title.pch = 'Diet', legend.position = "top",cex = 3
, size.title = 30, point.lwd = 2, size.legend = 25, size.legend.title = 30, size.xlabel = 25, size.ylabel = 25, size.axis = 18)
dev.off()
getwd()
setwd(curr_wd)
getwd()
library(lionessR)
library(igraph)
library(reshape2)
# BiocManager::install("limma")
library(limma)
library(SummarizedExperiment)
library(ROCR)
library(e1071)
library(randomForest)
library(dplyr)
library(readr)
library(AUC)
library(data.table)
# Parameters --------------------------------------------------------------
library("randomForest")
path_base = "C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/Analysis/"
path_outcome = "C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/Alpha_Beta_diversity_results/"
setwd(path_base)
getwd()
# setwd("C:/Users/fmelo/Desktop/Backup_Federico/Maastricht_data/Correlations_Lucki_for_Kristel/6 Months/Correlations")
files <- list.files(path=".", pattern="group*",
full.names=TRUE, recursive=FALSE)
curr_wd = getwd()
files
el
args = list()
args$direttoria = NA
outcomes = c("Clinical_outcome_combined", "Biomarker_outcome_combined","Endoscopic_outcome_combined" )
# na_treatment = c("zero", "elim")
# feat_sel = c("AverageShortestPathLength","ClusteringCoefficient",    "ClosenessCentrality",       "Eccentricity","Stress","Degree",
#       "BetweennessCentrality","NeighborhoodConnectivity","Radiality","TopologicalCoefficient")
data_frame_loop = expand.grid(files, outcomes)
colnames(data_frame_loop) = c("files", "outcomes")
# [1] "./group_CD_TNF_eliminate_14"        "./group_CD_TNF_eliminate_24"        "./group_CD_UC_TNF_eliminate_14"
# [4] "./group_CD_UC_TNF_eliminate_24"     "./group_CD_UC_VDZ_eliminate_14"     "./group_CD_UC_VDZ_eliminate_24"
# [7] "./group_CD_UC_VDZ_Not_eliminate_14" "./group_CD_UC_VDZ_Not_eliminate_24" "./group_CD_UST_eliminate_24"
# [10] "./group_CD_UST_Not_eliminate_24"    "./group_CD_VDZ_eliminate_14"        "./group_CD_VDZ_eliminate_24"
# [13] "./group_UC_TNF_eliminate_14"        "./group_UC_VDZ_eliminate_14"
# [1] "./group_CD_TNF_eliminate"        "./group_CD_UC_TNF_eliminate"     "./group_CD_UC_VDZ_eliminate"     "./group_CD_UC_VDZ_Not_eliminate"
# [5] "./group_CD_UST_eliminate"        "./group_CD_UST_Not_eliminate"    "./group_CD_VDZ_eliminate"        "./group_UC_TNF_eliminate"
# [9] "./group_UC_VDZ_eliminate"
for (riga_data in (1:nrow(data_frame_loop)) ){
setwd(curr_wd)
el = data_frame_loop[riga_data,]
input_file = el$files
outcome_file = el$outcome
# if (outcome_file == "Clinical_outcome_combined"){
#   next;
# }
args = list()
args$direttoria = gsub( "./","",input_file)
args$outcome = outcome_file
start = Sys.time()
source ("C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/Code/Alpha_beta_diversity/alpha_diversity_SHANNON_beta_diversity_31Jul_postPenders.R")
# [1] "C:/Users/fmelo/Desktop/Microbiome_drug_repurpose_project/Paddy_Results/metricmatrices"
stop = Sys.time()
stop-start
print(args$direttoria)
}
warnings()
c("Fusicatenibacter", "Roseburia", "Dorea", "Blautia", "Intestinimonas", "Adlercreutzia", "Clostridium_IV", "Parabacteroides", "Collinsella",
"Anaerostipes", "Subdoligranulum", "Butyricicoccus", "Oscillibacter", "Akkermansia", "Alistipes", "Ruminococcus2", "Ruminococcus", "Veillonella",
"Barnesiella", "Bifidobacterium")
Selected_microbes = c("Fusicatenibacter", "Roseburia", "Dorea", "Blautia", "Intestinimonas", "Adlercreutzia", "Clostridium_IV", "Parabacteroides", "Collinsella",
"Anaerostipes", "Subdoligranulum", "Butyricicoccus", "Oscillibacter", "Akkermansia", "Alistipes", "Ruminococcus2", "Ruminococcus", "Veillonella",
"Barnesiella", "Bifidobacterium")
View(otu_table)
